[{"strategies": ["st.integers()"], "solution": "def square_area(side):\n    return side * side\n    \n\ndef square_perimeter(side):\n    return 4 * side\n    \n\ndef circle_area(r):\n    return  r * r * 3.14\n    \n\ndef circle_circumference(r):\n    return r * 2 * 3.14\n    \n\ndef rectangle_perimeter(l, w):\n    return 2 * (l + w)\n   \n\n\nif __name__ == \"__main__\":\n   print(square_perimeter(2))\n   print(circle_area(2))\n   print(circle_circumference(3))\n   print(rectangle_perimeter(2 , 4))\n   \n\n", "funcname": "square_area", "entries": [0, -18565], "exo_name": "geometry.py_ca277_square_area"},{"strategies": ["st.integers()"], "solution": "def square_area(side):\n    return side * side\n    \n\ndef square_perimeter(side):\n    return 4 * side\n    \n\ndef circle_area(r):\n    return  r * r * 3.14\n    \n\ndef circle_circumference(r):\n    return r * 2 * 3.14\n    \n\ndef rectangle_perimeter(l, w):\n    return 2 * (l + w)\n   \n\n\nif __name__ == \"__main__\":\n   print(square_perimeter(2))\n   print(circle_area(2))\n   print(circle_circumference(3))\n   print(rectangle_perimeter(2 , 4))\n   \n\n", "funcname": "square_perimeter", "entries": [0, -12684], "exo_name": "geometry.py_ca277_square_perimeter"},{"strategies": ["st.integers()"], "solution": "def square_area(side):\n    return side * side\n    \n\ndef square_perimeter(side):\n    return 4 * side\n    \n\ndef circle_area(r):\n    return  r * r * 3.14\n    \n\ndef circle_circumference(r):\n    return r * 2 * 3.14\n    \n\ndef rectangle_perimeter(l, w):\n    return 2 * (l + w)\n   \n\n\nif __name__ == \"__main__\":\n   print(square_perimeter(2))\n   print(circle_area(2))\n   print(circle_circumference(3))\n   print(rectangle_perimeter(2 , 4))\n   \n\n", "funcname": "circle_area", "entries": [0, -1160877629], "exo_name": "geometry.py_ca277_circle_area"},{"strategies": ["st.integers()"], "solution": "def square_area(side):\n    return side * side\n    \n\ndef square_perimeter(side):\n    return 4 * side\n    \n\ndef circle_area(r):\n    return  r * r * 3.14\n    \n\ndef circle_circumference(r):\n    return r * 2 * 3.14\n    \n\ndef rectangle_perimeter(l, w):\n    return 2 * (l + w)\n   \n\n\nif __name__ == \"__main__\":\n   print(square_perimeter(2))\n   print(circle_area(2))\n   print(circle_circumference(3))\n   print(rectangle_perimeter(2 , 4))\n   \n\n", "funcname": "circle_circumference", "entries": [0, 25619], "exo_name": "geometry.py_ca277_circle_circumference"},{"strategies": ["st.integers()", "st.integers()"], "solution": "def square_area(side):\n    return side * side\n    \n\ndef square_perimeter(side):\n    return 4 * side\n    \n\ndef circle_area(r):\n    return  r * r * 3.14\n    \n\ndef circle_circumference(r):\n    return r * 2 * 3.14\n    \n\ndef rectangle_perimeter(l, w):\n    return 2 * (l + w)\n   \n\n\nif __name__ == \"__main__\":\n   print(square_perimeter(2))\n   print(circle_area(2))\n   print(circle_circumference(3))\n   print(rectangle_perimeter(2 , 4))\n   \n\n", "funcname": "rectangle_perimeter", "entries": [{"__tuple__": true, "items": [0, 0]}, {"__tuple__": true, "items": [7968917888512863576, -18677]}], "exo_name": "geometry.py_ca277_rectangle_perimeter"},{"strategies": ["st.integers()"], "solution": "def square_area(l):\n   return l * l \n\nif __name__ == \"__main__\":\n   print(square_area(5))\n   print(square_area(6))\n", "funcname": "square_area", "entries": [0, 21138], "exo_name": "geometry_1.py_ca277_square_area"},{"strategies": ["st.lists(st.integers())"], "solution": "\n\ndef reverse(a):\n\tb = []\n\twhile len(a) != 0:\n\t\tb.append(a.pop())\n\treturn b\n\n\nif __name__ == \"__main__\":\n  print(reverse([1,2,3]))\n  print(reverse([\"a\", \"b\"]))\n\t\n\n", "funcname": "reverse", "entries": [[], [20, 10, 0, -10, -20], ["toto", true, [10, 0, 9], 12.8, 6]], "exo_name": "reverse.py_ca277_reverse"},{"strategies": ["st.integers()"], "solution": "def circumference(r):\n\ty=3.141 * 2 *r\n\treturn y\ndef area (a):\n\tx= 3.141 *a**2\n\treturn x\ndef main():\n\tprint(circumference(2))\n\tprint(area(3))\nif __name__== \"__main__\":\n\tmain() \n\t\n", "funcname": "area", "entries": [0, -14329], "exo_name": "func_circle.py_ca116_area"},{"strategies": ["st.integers()"], "solution": "def circumference(r):\n\ty=3.141 * 2 *r\n\treturn y\ndef area (a):\n\tx= 3.141 *a**2\n\treturn x\ndef main():\n\tprint(circumference(2))\n\tprint(area(3))\nif __name__== \"__main__\":\n\tmain() \n\t\n", "funcname": "circumference", "entries": [0, -23091], "exo_name": "func_circle.py_ca116_circumference"},{"strategies": ["st.integers()"], "solution": "def double(n):\n\ty=2*n\n\treturn y\n\ndef main():\n   print(double(5))\n   print(double(\"Hello\"))\n\nif __name__ == \"__main__\":\n   main()\n", "funcname": "double", "entries": [0, -7601], "exo_name": "func_double.py_ca116_double"},{"strategies": ["st.lists(st.integers())"], "solution": "def selection_sort(a):\n\ti=0\n\twhile i<len(a):\n\t\tp=i\n\t\tj=i+1\n\t\twhile j < len(a):\n\t\t\tif a[j] < a[p] :\n\t\t\t\tp=j\n\t\t\tj=j+1\n\t\ttmp=a[p]\n\t\ta[p]=a[i]\n\t\ta[i]=tmp\n\t\ti=i+1\n\treturn a\n\ndef main():\n\tprint(selection_sort([10,9,8,7,6,5,4,3,2,1]))\nif __name__==\"__main__\":\n\tmain()\n\t\n", "funcname": "selection_sort", "entries": [[], [0], [25204, -1, -18176], [-18176, -1, 25204]], "exo_name": "func_selection_sort.py_ca116_selection_sort"},{"strategies": ["st.lists(st.integers())"], "solution": "def swap(a,i,j):\n    tmp=a[j]\n    a[j]=a[i]\n    a[i]=tmp\n\ndef reverse(a):\n  i=0\n  while i<len(a)/2:\n    swap(a,i,len(a)-i-1)\n    i= i+1\n\ndef main():\n   a=[4, 3, 1, 2]\n   swap(a,2,3)\n   print(a)\n   reverse(a)\n   print(a)\n \n\nif __name__ == \"__main__\":\n   main()\n\n\n", "funcname": "reverse", "entries": [[], [0], [-103, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, 1867157052], [-103, 113466788817036974729578468346735566318, 31758, 1867157052, 10933, -70, 1867157052], [1867157052, 1867157052, 10933, -70, 31758, 113466788817036974729578468346735566318, -103], [1867157052, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, -103], [-103, 113466788817036974729578468346735566318, 31758, -70, 10933, 1867157052, 1867157052], [[1]]], "exo_name": "func_reverse.py_ca116_reverse"},{"strategies": ["st.lists(st.integers())", "st.integers()"], "solution": "def bsearch(a,q):\n   low = 0\n   high = len(a)\n\n   while low < high:\n      mid = (low + high) / 2\n\n      if a[mid] < q:\n         low = mid + 1\n      else:\n         high = mid\n\n   return low\n\n", "funcname": "bsearch", "entries": [{"__tuple__": true, "items": [[], 12]}, {"__tuple__": true, "items": [[1, 2, 3, 4, 6, 7, 8], 5]}, {"__tuple__": true, "items": [[1, 2, 3, 4, 6, 7, 8], 1]}, {"__tuple__": true, "items": [[1, 2, 3, 4, 6, 7, 8], 4]}], "exo_name": "func_bsearch.py_ca116_bsearch"},{"strategies": [""], "solution": "def swap_keys_values(d):\n    return {v: k for (k, v) in list(d.items())}\n", "funcname": "swap_keys_values", "entries": [{}, {"1": "a"}, {"1": "a", "2": "b", "3": "c", "4": "d"}, {"1": "a", "2": "b", "3": "a"}], "exo_name": "swap_42.py_ca117_swap_keys_values"},{"strategies": [""], "solution": "# Swap keys with values but only unique values and ignore duplicates\ndef swap_unique_keys_values(d):\n    # Have to explicitly convert dict_view type to list type in Python 3\n    return dict([(v, k) for (k, v) in list(d.items()) if list(d.values()).count(v) == 1])\n", "funcname": "swap_unique_keys_values", "entries": [{}, {"1": "a"}, {"1": "a", "2": "b", "3": "c", "4": "d"}, {"1": "a", "2": "b", "3": "a"}], "exo_name": "swap_more_42.py_ca117_swap_unique_keys_values"},{"strategies": ["st.integers()", "st.integers()", "st.integers()", "st.integers()", "st.integers()", "st.integers()"], "solution": "def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):\n    d = ((x2-x1)**2 + (y2-y1)**2)**0.5\n    if d < r1 + r2:\n        return True\n    return False\n\ndef main():\n    print((overlap()))\n    print((overlap(10)))\n    print((overlap(10,10)))\n    print((overlap(10,10,10)))\n    print((overlap(10,0,10)))\n    print((overlap(10,0,1,8,0,1)))\n    print((overlap(10,0,1,8,0,2)))\n\nif __name__ == '__main__':\n    main()\n", "funcname": "overlap", "entries": [[0, 0, 0, 0, 0, 0], [-10127, -4523146639991987157, 4984975518095343106, 16069, -6161206257421287809, -21999], [28812, -95, -14565, -14231, -57, -13105], [29825, -1453, 8499, 60, -25950, -863536228], [4254, -23892, -290, 8971, 1739, -4934], [-632291906, 26448, 10662, -106, -158122742, 24689]], "exo_name": "circle_62.py_ca117_overlap"},{"strategies": ["st.lists(st.integers())", "st.lists(st.integers())"], "solution": "# Append l1 to l2. If l2 not supplied default to empty list.\ndef append2list(l1, l2=None):\n    if l2 == None:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2\n\ndef main():    \n    list1 = ['cat', 'dog']\n    nlist = append2list(list1)\n    # nlist should be ['cat', 'dog']\n    print(nlist)\n\n    list2 = ['lion']\n    nlist = append2list(list2, ['antelope'])\n    # nlist should be ['lion', 'antelope']\n    print(nlist)\n\n    list3 = ['fox', 'chicken']\n    nlist = append2list(list3)\n    # nlist should be ['fox', 'chicken']\n    print(nlist)\n\nif __name__ == '__main__':\n    main()\n", "funcname": "append2list", "entries": [{"__tuple__": true, "items": [[0, 0], [0]]}, {"__tuple__": true, "items": [[0, 0, 0, 0, 0], [0, 0, 0]]}, {"__tuple__": true, "items": [[0, 0], [0, 0, 0]]}, {"__tuple__": true, "items": [[], []]}, {"__tuple__": true, "items": [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]}], "exo_name": "mutable_62.py_ca117_append2list"},{"strategies": ["st.integers()"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which contains \nevery second letter in some_str'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''take a list of numbers and remove zeros from the list'''\n    while 0 in list:\n        list.remove(0)\n\ndef search(list,num):\n    '''find the position of num in list, return -1 if it is not there'''\n    i = 0\n    while i < len(list):\n        if list[i] == num:\n            return i\n        i = i + 1\n    return -1\n\ndef print_keys(dict):\n    '''print all the keys in a dictionary, one per line'''\n    for key in dict:\n        print(key)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\n    \n", "funcname": "get_price", "entries": [17064], "exo_name": "funcs.py_ca278_get_price"},{"strategies": ["st.lists(st.integers())", "st.lists(st.integers())"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which contains \nevery second letter in some_str'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''take a list of numbers and remove zeros from the list'''\n    while 0 in list:\n        list.remove(0)\n\ndef search(list,num):\n    '''find the position of num in list, return -1 if it is not there'''\n    i = 0\n    while i < len(list):\n        if list[i] == num:\n            return i\n        i = i + 1\n    return -1\n\ndef print_keys(dict):\n    '''print all the keys in a dictionary, one per line'''\n    for key in dict:\n        print(key)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\n    \n", "funcname": "merge_lists", "entries": [{"__tuple__": true, "items": [[17204, 17320, -5960670194939280345, 393998980], [-44]]}], "exo_name": "funcs.py_ca278_merge_lists"},{"strategies": ["st.text(alphanum)"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which contains \nevery second letter in some_str'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''take a list of numbers and remove zeros from the list'''\n    while 0 in list:\n        list.remove(0)\n\ndef search(list,num):\n    '''find the position of num in list, return -1 if it is not there'''\n    i = 0\n    while i < len(list):\n        if list[i] == num:\n            return i\n        i = i + 1\n    return -1\n\ndef print_keys(dict):\n    '''print all the keys in a dictionary, one per line'''\n    for key in dict:\n        print(key)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\n    \n", "funcname": "weird_case", "entries": ["", "Attempts", "this is a very hard problem to solve", "how are you Fred!"], "exo_name": "funcs.py_ca278_weird_case"},{"strategies": ["st.lists(st.integers())"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which contains \nevery second letter in some_str'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''take a list of numbers and remove zeros from the list'''\n    while 0 in list:\n        list.remove(0)\n\ndef search(list,num):\n    '''find the position of num in list, return -1 if it is not there'''\n    i = 0\n    while i < len(list):\n        if list[i] == num:\n            return i\n        i = i + 1\n    return -1\n\ndef print_keys(dict):\n    '''print all the keys in a dictionary, one per line'''\n    for key in dict:\n        print(key)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\n    \n", "funcname": "remove_zeros", "entries": [[], [1, 2, 3, 4, -12, -2], [0, 0, 0, 0, 0], [1, 0, 3, 2, 1, 9, 0, 0, 0]], "exo_name": "funcs.py_ca278_remove_zeros"},{"strategies": ["st.lists(st.integers())", "st.integers()"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which contains \nevery second letter in some_str'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''take a list of numbers and remove zeros from the list'''\n    while 0 in list:\n        list.remove(0)\n\ndef search(list,num):\n    '''find the position of num in list, return -1 if it is not there'''\n    i = 0\n    while i < len(list):\n        if list[i] == num:\n            return i\n        i = i + 1\n    return -1\n\ndef print_keys(dict):\n    '''print all the keys in a dictionary, one per line'''\n    for key in dict:\n        print(key)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\n    \n", "funcname": "search", "entries": [{"__tuple__": true, "items": [[], 0]}], "exo_name": "funcs.py_ca278_search"},{"strategies": [""], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which contains \nevery second letter in some_str'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''take a list of numbers and remove zeros from the list'''\n    while 0 in list:\n        list.remove(0)\n\ndef search(list,num):\n    '''find the position of num in list, return -1 if it is not there'''\n    i = 0\n    while i < len(list):\n        if list[i] == num:\n            return i\n        i = i + 1\n    return -1\n\ndef print_keys(dict):\n    '''print all the keys in a dictionary, one per line'''\n    for key in dict:\n        print(key)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\n    \n", "funcname": "print_keys", "entries": [{}, {"1": "a"}, {"1": "a", "2": "b", "3": "c", "4": "d"}, {"key1": "a", "key2": "b", "key3": "a"}], "exo_name": "funcs.py_ca278_print_keys"},{"strategies": ["st.integers()"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''remove zeros from list'''\n    while 0 in list:\n        list.remove(0)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\ndef search(str,sub):\n  '''returns the position of sub in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if sub == str[i]:\n      return i\n    i = i + 1\n  return -1\n\ndef countdown(num):\n  '''prints all the numbers from num to 0'''\n  while num >= 0:\n    print(num)\n    num = num - 1\n\ndef fibonacci(n):\n  '''returns the value of the fibonnaci series at position n'''\n  if n == 0:\n    return 1\n  elif n == 1:\n    return 1\n  else:\n    fibN_2 = 1\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing get_price')\n  print(get_price(7))\n\n  print('testing merge_lists')\n  print(merge_lists(['a','x'],['b','y']))\n\n  print('testing weird_case')\n  print(weird_case('test'))\n\n  print('testing remove_zeros')\n  l = [0,0,9]\n  print(l)\n  remove_zeros(l)\n  print(l)\n\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "get_price", "entries": [0, 16, 60, -10, 123], "exo_name": "funcs08.py_ca278_get_price"},{"strategies": ["st.lists(st.integers())", "st.lists(st.integers())"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''remove zeros from list'''\n    while 0 in list:\n        list.remove(0)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\ndef search(str,sub):\n  '''returns the position of sub in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if sub == str[i]:\n      return i\n    i = i + 1\n  return -1\n\ndef countdown(num):\n  '''prints all the numbers from num to 0'''\n  while num >= 0:\n    print(num)\n    num = num - 1\n\ndef fibonacci(n):\n  '''returns the value of the fibonnaci series at position n'''\n  if n == 0:\n    return 1\n  elif n == 1:\n    return 1\n  else:\n    fibN_2 = 1\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing get_price')\n  print(get_price(7))\n\n  print('testing merge_lists')\n  print(merge_lists(['a','x'],['b','y']))\n\n  print('testing weird_case')\n  print(weird_case('test'))\n\n  print('testing remove_zeros')\n  l = [0,0,9]\n  print(l)\n  remove_zeros(l)\n  print(l)\n\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "merge_lists", "entries": [{"__tuple__": true, "items": [[], []]}, {"__tuple__": true, "items": [[], [1, 2, 3, 4]]}, {"__tuple__": true, "items": [[1, 2, 3, 4], []]}, {"__tuple__": true, "items": [[10, 20, 45, 2, -10987, 89165], [9, 0, -6754, 5625264, 8765]]}], "exo_name": "funcs08.py_ca278_merge_lists"},{"strategies": ["st.text(alphanum)"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''remove zeros from list'''\n    while 0 in list:\n        list.remove(0)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\ndef search(str,sub):\n  '''returns the position of sub in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if sub == str[i]:\n      return i\n    i = i + 1\n  return -1\n\ndef countdown(num):\n  '''prints all the numbers from num to 0'''\n  while num >= 0:\n    print(num)\n    num = num - 1\n\ndef fibonacci(n):\n  '''returns the value of the fibonnaci series at position n'''\n  if n == 0:\n    return 1\n  elif n == 1:\n    return 1\n  else:\n    fibN_2 = 1\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing get_price')\n  print(get_price(7))\n\n  print('testing merge_lists')\n  print(merge_lists(['a','x'],['b','y']))\n\n  print('testing weird_case')\n  print(weird_case('test'))\n\n  print('testing remove_zeros')\n  l = [0,0,9]\n  print(l)\n  remove_zeros(l)\n  print(l)\n\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "weird_case", "entries": ["", "Attempts", "this is a very hard problem to solve", "how are you Fred!"], "exo_name": "funcs08.py_ca278_weird_case"},{"strategies": ["st.lists(st.integers())"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''remove zeros from list'''\n    while 0 in list:\n        list.remove(0)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\ndef search(str,sub):\n  '''returns the position of sub in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if sub == str[i]:\n      return i\n    i = i + 1\n  return -1\n\ndef countdown(num):\n  '''prints all the numbers from num to 0'''\n  while num >= 0:\n    print(num)\n    num = num - 1\n\ndef fibonacci(n):\n  '''returns the value of the fibonnaci series at position n'''\n  if n == 0:\n    return 1\n  elif n == 1:\n    return 1\n  else:\n    fibN_2 = 1\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing get_price')\n  print(get_price(7))\n\n  print('testing merge_lists')\n  print(merge_lists(['a','x'],['b','y']))\n\n  print('testing weird_case')\n  print(weird_case('test'))\n\n  print('testing remove_zeros')\n  l = [0,0,9]\n  print(l)\n  remove_zeros(l)\n  print(l)\n\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "remove_zeros", "entries": [[], [1, 2, 3, 4, -12, -2], [0, 0, 0, 0, 0], [1, 0, 3, 2, 1, 9, 0, 0, 0]], "exo_name": "funcs08.py_ca278_remove_zeros"},{"strategies": ["st.text(alphanum)", "st.text(alphanum,1,1)"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''remove zeros from list'''\n    while 0 in list:\n        list.remove(0)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\ndef search(str,sub):\n  '''returns the position of sub in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if sub == str[i]:\n      return i\n    i = i + 1\n  return -1\n\ndef countdown(num):\n  '''prints all the numbers from num to 0'''\n  while num >= 0:\n    print(num)\n    num = num - 1\n\ndef fibonacci(n):\n  '''returns the value of the fibonnaci series at position n'''\n  if n == 0:\n    return 1\n  elif n == 1:\n    return 1\n  else:\n    fibN_2 = 1\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing get_price')\n  print(get_price(7))\n\n  print('testing merge_lists')\n  print(merge_lists(['a','x'],['b','y']))\n\n  print('testing weird_case')\n  print(weird_case('test'))\n\n  print('testing remove_zeros')\n  l = [0,0,9]\n  print(l)\n  remove_zeros(l)\n  print(l)\n\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "search", "entries": [{"__tuple__": true, "items": ["", "a"]}, {"__tuple__": true, "items": ["cbzeycuzbvyzuvb", "a"]}, {"__tuple__": true, "items": ["cbsducsvdbcyts", "c"]}, {"__tuple__": true, "items": ["dbzeducvbzy", "y"]}, {"__tuple__": true, "items": ["xqvsgxcutvy", "u"]}], "exo_name": "funcs08.py_ca278_search"},{"strategies": [""], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''remove zeros from list'''\n    while 0 in list:\n        list.remove(0)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\ndef search(str,sub):\n  '''returns the position of sub in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if sub == str[i]:\n      return i\n    i = i + 1\n  return -1\n\ndef countdown(num):\n  '''prints all the numbers from num to 0'''\n  while num >= 0:\n    print(num)\n    num = num - 1\n\ndef fibonacci(n):\n  '''returns the value of the fibonnaci series at position n'''\n  if n == 0:\n    return 1\n  elif n == 1:\n    return 1\n  else:\n    fibN_2 = 1\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing get_price')\n  print(get_price(7))\n\n  print('testing merge_lists')\n  print(merge_lists(['a','x'],['b','y']))\n\n  print('testing weird_case')\n  print(weird_case('test'))\n\n  print('testing remove_zeros')\n  l = [0,0,9]\n  print(l)\n  remove_zeros(l)\n  print(l)\n\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "countdown", "entries": [-1, 0, 5, 42], "exo_name": "funcs08.py_ca278_countdown"},{"strategies": ["st.integers(1,100)"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which is the same as some_str but the case alternates between upper and lower'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''remove zeros from list'''\n    while 0 in list:\n        list.remove(0)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\ndef search(str,sub):\n  '''returns the position of sub in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if sub == str[i]:\n      return i\n    i = i + 1\n  return -1\n\ndef countdown(num):\n  '''prints all the numbers from num to 0'''\n  while num >= 0:\n    print(num)\n    num = num - 1\n\ndef fibonacci(n):\n  '''returns the value of the fibonnaci series at position n'''\n  if n == 0:\n    return 1\n  elif n == 1:\n    return 1\n  else:\n    fibN_2 = 1\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing get_price')\n  print(get_price(7))\n\n  print('testing merge_lists')\n  print(merge_lists(['a','x'],['b','y']))\n\n  print('testing weird_case')\n  print(weird_case('test'))\n\n  print('testing remove_zeros')\n  l = [0,0,9]\n  print(l)\n  remove_zeros(l)\n  print(l)\n\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "fibonacci", "entries": [0, 1, 2, 10, 23, 99], "exo_name": "funcs08.py_ca278_fibonacci"},{"strategies": [""], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  while num >= 1:\n    print(num)\n    time.sleep(0.1)\n    num = num - 1\n  print('LIFT OFF!')\n\ndef search(str,letter):\n  '''returns True if letter is in str, False if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return True\n    i = i + 1\n  return False\n\ndef index(str,letter):\n  '''returns the position of letter in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return i\n    i = i + 1\n  return -1\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonnaci series at position n'''\n  if n == 0 or n == 1:\n    return 1\n  else:\n    fibN_2 = 1\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t'))\n  print(index('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "countdown", "entries": [-1, 0, 5, 42], "exo_name": "iterative08.py_ca278_countdown"},{"strategies": ["st.text(alphanum)", "st.text(alphanum,1,1)"], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  while num >= 1:\n    print(num)\n    time.sleep(0.1)\n    num = num - 1\n  print('LIFT OFF!')\n\ndef search(str,letter):\n  '''returns True if letter is in str, False if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return True\n    i = i + 1\n  return False\n\ndef index(str,letter):\n  '''returns the position of letter in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return i\n    i = i + 1\n  return -1\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonnaci series at position n'''\n  if n == 0 or n == 1:\n    return 1\n  else:\n    fibN_2 = 1\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t'))\n  print(index('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "search", "entries": [{"__tuple__": true, "items": ["", "0"]}, {"__tuple__": true, "items": ["0", "0"]}], "exo_name": "iterative08.py_ca278_search"},{"strategies": ["st.text(alphanum)", "st.text(alphanum,1,1)"], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  while num >= 1:\n    print(num)\n    time.sleep(0.1)\n    num = num - 1\n  print('LIFT OFF!')\n\ndef search(str,letter):\n  '''returns True if letter is in str, False if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return True\n    i = i + 1\n  return False\n\ndef index(str,letter):\n  '''returns the position of letter in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return i\n    i = i + 1\n  return -1\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonnaci series at position n'''\n  if n == 0 or n == 1:\n    return 1\n  else:\n    fibN_2 = 1\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t'))\n  print(index('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "index", "entries": [{"__tuple__": true, "items": ["", "0"]}, {"__tuple__": true, "items": ["0", "0"]}, {"__tuple__": true, "items": ["9dK=1%s)a>PI5FmV/dq,-=]N2MmOkB .hRL_P2", "="]}], "exo_name": "iterative08.py_ca278_index"},{"strategies": ["st.integers(1,100)"], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  while num >= 1:\n    print(num)\n    time.sleep(0.1)\n    num = num - 1\n  print('LIFT OFF!')\n\ndef search(str,letter):\n  '''returns True if letter is in str, False if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return True\n    i = i + 1\n  return False\n\ndef index(str,letter):\n  '''returns the position of letter in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return i\n    i = i + 1\n  return -1\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonnaci series at position n'''\n  if n == 0 or n == 1:\n    return 1\n  else:\n    fibN_2 = 1\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t'))\n  print(index('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "fibonacci", "entries": [1, 70], "exo_name": "iterative08.py_ca278_fibonacci"},{"strategies": [""], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  if num == 0:\n    print(\"LIFT OFF!\")\n  else:\n    print(num)\n    time.sleep(0.1)\n    countdown(num-1)\n\ndef search(str,letter):\n  '''returns True if letter is in str, False otherwise'''\n  if str == \"\":\n    return False\n  elif str[0] == letter:\n    return True\n  else:\n    #keep looking\n    return search(str[1:],letter)\n  \n\ndef index(str,letter,pos):\n  '''returns the position of letter in str, -1 if it is not there'''\n  if pos == len(str):\n    return -1\n  elif str[pos] == letter:\n    return pos\n  else:\n    return index(str,letter,pos+1)\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonacci series at position n'''\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t',0))\n  print(index('test','a',0))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "countdown", "entries": [-1, 0, 5, 42], "exo_name": "recursive08.py_ca278_countdown"},{"strategies": ["st.text(alphanum)", "st.text(alphanum,1,1)"], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  if num == 0:\n    print(\"LIFT OFF!\")\n  else:\n    print(num)\n    time.sleep(0.1)\n    countdown(num-1)\n\ndef search(str,letter):\n  '''returns True if letter is in str, False otherwise'''\n  if str == \"\":\n    return False\n  elif str[0] == letter:\n    return True\n  else:\n    #keep looking\n    return search(str[1:],letter)\n  \n\ndef index(str,letter,pos):\n  '''returns the position of letter in str, -1 if it is not there'''\n  if pos == len(str):\n    return -1\n  elif str[pos] == letter:\n    return pos\n  else:\n    return index(str,letter,pos+1)\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonacci series at position n'''\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t',0))\n  print(index('test','a',0))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "search", "entries": [{"__tuple__": true, "items": ["", "0"]}, {"__tuple__": true, "items": [")&", "="]}], "exo_name": "recursive08.py_ca278_search"},{"strategies": ["st.text(alphanum)", "st.text(alphanum,1,1)", "st.integers(0,0)"], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  if num == 0:\n    print(\"LIFT OFF!\")\n  else:\n    print(num)\n    time.sleep(0.1)\n    countdown(num-1)\n\ndef search(str,letter):\n  '''returns True if letter is in str, False otherwise'''\n  if str == \"\":\n    return False\n  elif str[0] == letter:\n    return True\n  else:\n    #keep looking\n    return search(str[1:],letter)\n  \n\ndef index(str,letter,pos):\n  '''returns the position of letter in str, -1 if it is not there'''\n  if pos == len(str):\n    return -1\n  elif str[pos] == letter:\n    return pos\n  else:\n    return index(str,letter,pos+1)\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonacci series at position n'''\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t',0))\n  print(index('test','a',0))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "index", "entries": [{"__tuple__": true, "items": ["", "0", 0]}, {"__tuple__": true, "items": ["dc8", "s", 0]}], "exo_name": "recursive08.py_ca278_index"},{"strategies": ["st.integers(1,100)"], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  if num == 0:\n    print(\"LIFT OFF!\")\n  else:\n    print(num)\n    time.sleep(0.1)\n    countdown(num-1)\n\ndef search(str,letter):\n  '''returns True if letter is in str, False otherwise'''\n  if str == \"\":\n    return False\n  elif str[0] == letter:\n    return True\n  else:\n    #keep looking\n    return search(str[1:],letter)\n  \n\ndef index(str,letter,pos):\n  '''returns the position of letter in str, -1 if it is not there'''\n  if pos == len(str):\n    return -1\n  elif str[pos] == letter:\n    return pos\n  else:\n    return index(str,letter,pos+1)\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonacci series at position n'''\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t',0))\n  print(index('test','a',0))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "fibonacci", "entries": [0, 1, 2, 10, 23, 99], "exo_name": "recursive08.py_ca278_fibonacci"},{"strategies": ["st.text(alphanum)"], "solution": "def count_letters(s):\n    if not s:\n        return 0\n    return 1 + count_letters(s[1:])\n", "funcname": "count_letters", "entries": ["", "0", "##", "t"], "exo_name": "count_102.py_ca117_count_letters"},{"strategies": ["st.integers(1,100)"], "solution": "# Recursive Fibonacci\ndef fibonacci(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)\n", "funcname": "fibonacci", "entries": [0, 1, 2, 10, 23, 99], "exo_name": "fibonacci_102.py_ca117_fibonacci"},{"strategies": ["st.lists(st.integers())"], "solution": "def maximum(l):\n    if len(l) == 1:\n        return l[0]\n    tail_max = maximum(l[1:])\n    return l[0] if l[0] > tail_max else tail_max\n    # Could do this but ought not use max I suppose...\n    # return max(l[0], maximum(l[1:]))\n", "funcname": "maximum", "entries": [[], [0], [67, 1, 2, -2, 0], [0, -2, 2, 1, 67], [-10, -23, -45, -9, -45617]], "exo_name": "maximum_102.py_ca117_maximum"},{"strategies": ["st.lists(st.integers())"], "solution": "def minimum(l):\n    if len(l) == 1:\n        return l[0]\n    tail_min = minimum(l[1:])\n    return l[0] if l[0] < tail_min else tail_min\n    # Could do this but ought not use min I suppose...\n    # return min(l[0], rmin(l[1:]))\n", "funcname": "minimum", "entries": [[], [0], [2, 10, 23, 9, 187], [-2, -26, 7, -123, -1236521], [3896, 3673, 45, 16715, 23673]], "exo_name": "minimum_102.py_ca117_minimum"},{"strategies": ["st.lists(st.integers())"], "solution": "def partition(A, p, r):\n\n    # q and j start at p\n    q = j = p\n\n    # up to but not including pivot\n    while j < r:\n\n        # move values less than or equal to pivot and update q\n        if A[j] <= A[r]:\n            A[q], A[j] = A[j], A[q]\n            q += 1\n\n        j += 1\n\n    # swap pivot with A[q]\n    A[q], A[r] = A[r], A[q]\n\n    # return pivot index\n    return q\n\n# recursively partition list until sorted\ndef quicksort(A, p, r):\n\n    # return if nothing to sort (zero or one element)\n    if r <= p:\n        return\n\n    # partition and sort left and right sublists\n    q = partition(A, p, r)\n    quicksort(A, p, q-1)\n    quicksort(A, q+1, r)\n\n# repeatedly move minimimum of remaining sublist to front\ndef selectionsort(A):\n\n    i = 0\n    while i < len(A):\n        min_index = i\n        j = i+1\n        while j < len(A):\n            if A[j] < A[min_index]:\n                min_index = j\n            j += 1\n        A[i], A[min_index] = A[min_index], A[i]\n        i += 1\n\n# repeatedly insert into sorted array\ndef insertionsort(A):\n    pass\n", "funcname": "selectionsort", "entries": [[], [0]], "exo_name": "selectionsort_102.py_ca117_selectionsort"},{"strategies": ["st.integers()", "st.integers(0,100)"], "solution": "def power(m, n):\n    if not n:\n        return 1\n    return m * power(m, n-1)\n", "funcname": "power", "entries": [{"__tuple__": true, "items": [0, 0]}, {"__tuple__": true, "items": [62, 4]}, {"__tuple__": true, "items": [-14012, 0]}], "exo_name": "power_102.py_ca117_power"},{"strategies": [""], "solution": "def partition(A, p, r):\n\n    # q and j start at p\n    q = j = p\n\n    # up to but not including pivot\n    while j < r:\n\n        # move values less than or equal to pivot and update q\n        if A[j] <= A[r]:\n            A[q], A[j] = A[j], A[q]\n            q += 1\n\n        j += 1\n\n    # swap pivot with A[q]\n    A[q], A[r] = A[r], A[q]\n\n    # return pivot index\n    return q\n\n# recursively partition list until sorted\ndef quicksort(A, p, r):\n\n    # return if nothing to sort (zero or one element)\n    if r <= p:\n        return\n\n    # partition and sort left and right sublists\n    q = partition(A, p, r)\n    quicksort(A, p, q-1)\n    quicksort(A, q+1, r)\n\n# repeatedly move minimimum of remaining sublist to front\ndef selectionsort(A):\n\n    i = 0\n    while i < len(A):\n        min_index = i\n        j = i+1\n        while j < len(A):\n            if A[j] < A[min_index]:\n                min_index = j\n            j += 1\n        A[i], A[min_index] = A[min_index], A[i]\n        i += 1\n\n# repeatedly insert into sorted array\ndef insertionsort(A):\n    pass\n", "funcname": "quicksort", "entries": [{"__tuple__": true, "items": [[], 0, 0]}, {"__tuple__": true, "items": [[5, 4, 3, 2, 1], 0, 4]}, {"__tuple__": true, "items": [[5, 5, 5, 5], 0, 3]}, {"__tuple__": true, "items": [[5675, 564, 987, 154132, 8976, 0, -16221, 87526, 9826732986], 0, 8]}], "exo_name": "quicksort_102.py_ca117_quicksort"},{"strategies": ["st.lists(st.integers())"], "solution": "def reverse_list(l):\n    if l == []:\n        return []\n    return reverse_list(l[1:]) + [l[0]]\n    # temp = reverse(l[1:])\n    # temp.append(l[0])\n    # return temp\n    # note we cannot use return reverse(l[1:]).append(l[0]) because append()\n    # does not return anything\n", "funcname": "reverse_list", "entries": [[], [0], [9650, 12103, -1947378123, -109345868112896702250879906349988323457, 85, -74, -10050, 787, -3], [9650, 12103, -1947378123, -109345868112896702250879906349988323457], [0, 0], [85, -74, -10050, 787, 9650, 12103, -1947378123, -109345868112896702250879906349988323457, -3], [85, -74, -10050, 787, -3, 9650, 12103, -1947378123, -109345868112896702250879906349988323457]], "exo_name": "reverse_102.py_ca117_reverse_list"},{"strategies": ["st.lists(st.integers())"], "solution": "def swap(a, i, j):\n   tmp  = a[i]\n   a[i] = a[j]\n   a[j] = tmp\n\ndef find_position_of_smallest(a, i):\n p = i  \n while i < len(a):\n    if a[i]  < a[p]:\n       p = i\n    i = i + 1\n return p\t\n   \ndef sort(a):\n   i = 0\n   while i < len(a):\n      p = find_position_of_smallest(a,i)       \n      swap(a, i, p)\n      i = i + 1\n", "funcname": "sort", "entries": [[0], [], [" "], [70, 339305549]], "exo_name": "selection_sort.py_ca277_sort"},{"strategies": ["st.lists(st.integers())", "st.lists(st.integers())"], "solution": "def union(a, b):\n\tc=[]\n\ti = 0\n\twhile i < len(a):\n\t\tif a[i] not in c:\n\t\t\tc.append(a[i])\n\t\ti = i + 1\n\n\tp = 0\n\twhile p < len(b):\n\t\tif b[p] not in c:\n\t\t\tc.append(b[p])\n\t\tp = p + 1\n\n\treturn c\n\ndef intersection(a, b):\n\td=[]\n\ti = 0\n\twhile i < len(a):\n\t\tif a[i] in b and a[i] not in d:\n\t\t\td.append(a[i])\n\t\ti = i + 1\n\n\treturn d", "funcname": "union", "entries": [{"__tuple__": true, "items": [[], []]}, {"__tuple__": true, "items": [[25785], [25785]]}, {"__tuple__": true, "items": [[-90, 21135, 29310, -8059, 7114, -90, -5808, 1333, -18691, 7, -19450, 67745575129021321678860432754396203799, -9288, -161403197171354040520992237328119268342, 49, 120528818203287557, 133011337445419463191476642795673848676, 11952, 11996], [5, -9316, 7379237229304681733]]}], "exo_name": "sets.py_ca277_union"},{"strategies": ["st.lists(st.integers())", "st.lists(st.integers())"], "solution": "def union(a, b):\n\tc=[]\n\ti = 0\n\twhile i < len(a):\n\t\tif a[i] not in c:\n\t\t\tc.append(a[i])\n\t\ti = i + 1\n\n\tp = 0\n\twhile p < len(b):\n\t\tif b[p] not in c:\n\t\t\tc.append(b[p])\n\t\tp = p + 1\n\n\treturn c\n\ndef intersection(a, b):\n\td=[]\n\ti = 0\n\twhile i < len(a):\n\t\tif a[i] in b and a[i] not in d:\n\t\t\td.append(a[i])\n\t\ti = i + 1\n\n\treturn d", "funcname": "intersection", "entries": [{"__tuple__": true, "items": [[], []]}, {"__tuple__": true, "items": [[20052, 20052, -9991], [102, 20052, -9991]]}, {"__tuple__": true, "items": [[38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794], [38908273694008580353068229963801163341, 59, 38908273694008580353068229963801163341, -38, 28239, -2723, 24559, -5794]]}], "exo_name": "sets.py_ca277_intersection"},{"strategies": [""], "solution": "# Simply swap keys with values\ndef swap_keys_values(d):\n    return dict([(v, k) for (k, v) in list(d.items())])\n", "funcname": "swap_keys_values", "entries": [{}, {"1": "a"}, {"1": "a", "2": "b", "3": "c", "4": "d"}, {"1": "a", "2": "b", "3": "a"}], "exo_name": "swap_v1_042.py_ca117_swap_keys_values"},{"strategies": [""], "solution": "# Swap keys with values but only unique values and ignore duplicates\ndef swap_unique_keys_values(d):\n    # Have to explicitly convert dict_view type to list type in Python 3\n    return dict([(v, k) for (k, v) in list(d.items()) if list(d.values()).count(v) == 1])\n", "funcname": "swap_unique_keys_values", "entries": [{}, {"1": "a"}, {"1": "a", "2": "b", "3": "c", "4": "d"}, {"1": "a", "2": "b", "3": "a"}], "exo_name": "swap_v2_042.py_ca117_swap_unique_keys_values"},{"strategies": ["st.integers()"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which contains \nevery second letter in some_str'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''take a list of numbers and remove zeros from the list'''\n    while 0 in list:\n        list.remove(0)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\n    \n", "funcname": "get_price", "entries": [60, 13598], "exo_name": "funcs04.py_ca278_get_price"},{"strategies": ["st.lists(st.integers())", "st.lists(st.integers())"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which contains \nevery second letter in some_str'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''take a list of numbers and remove zeros from the list'''\n    while 0 in list:\n        list.remove(0)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\n    \n", "funcname": "merge_lists", "entries": [{"__tuple__": true, "items": [[-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87], [-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87]]}, {"__tuple__": true, "items": [[-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87, -30849, 21366, -68, 67, -901137699852256218, -104, 9823, -87], [12610, -7590278680466061936, 124, 11873, 6985, 10512, 23341, -30849, 21366, -68, 67, -901137699852256218, -104, 9823, -87, 21366, 67, -104, -87]]}, {"__tuple__": true, "items": [[-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87, -30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87], [-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87, -30849, 21366, -68, 67, -901137699852256218, -104, 9823, -87, 12610, -7590278680466061936, 124, 11873, 6985, 10512, 23341]]}, {"__tuple__": true, "items": [[-30849, 21366, -7590278680466061936, 124, 67, -901137699852256218, 6985, 10512, 9823, -87, -30849, 21366, -7590278680466061936, 124, 67, -901137699852256218, 6985, 10512, 9823, -87], [-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87]]}, {"__tuple__": true, "items": [[-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87], [-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87, -30849]]}, {"__tuple__": true, "items": [[-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87, [-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87]], [-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87]]}, {"__tuple__": true, "items": [[-30849], [-30849]]}, {"__tuple__": true, "items": [[-30849], [-30849, -87]]}, {"__tuple__": true, "items": [[-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87, []], [-30849, 12610, 21366, -7590278680466061936, -68, 124, 67, 11873, -901137699852256218, 6985, -104, 10512, 9823, 23341, -87]]}], "exo_name": "funcs04.py_ca278_merge_lists"},{"strategies": ["st.text(alphanum)"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which contains \nevery second letter in some_str'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''take a list of numbers and remove zeros from the list'''\n    while 0 in list:\n        list.remove(0)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\n    \n", "funcname": "weird_case", "entries": ["au0x6", "F:BnJ"], "exo_name": "funcs04.py_ca278_weird_case"},{"strategies": ["st.lists(st.integers())"], "solution": "def merge_lists(l1,l2):\n  '''take two lists l1 and l2 and return a third list which contains \n  every second element of l1 and l2'''\n  l3 = []\n  i = 0\n  while i < len(l1):\n      l3.append(l1[i])\n      i += 2\n  i = 0\n  while i < len(l2):\n      l3.append(l2[i])\n      i += 2\n  return l3\n\ndef weird_case(some_str):\n    '''takes a string some_str and contains a new string which contains \nevery second letter in some_str'''\n    new_str = \"\"\n    i = 0\n    lc = 0 # separate count for the letters\n    while i < len(some_str):\n        if some_str[i].isalpha():\n            if lc % 2 == 0:\n                new_str += some_str[i].upper()\n            else:\n                new_str += some_str[i].lower()\n            lc += 1\n        else:\n          new_str += some_str[i]\n        i = i + 1\n    return new_str\n\ndef remove_zeros(list):\n    '''take a list of numbers and remove zeros from the list'''\n    while 0 in list:\n        list.remove(0)\n\ndef get_price(age):\n    '''checks age and returns price associated with the age'''\n    if age <= 16:\n        return 5\n    elif age <=60:\n        return 10\n    else:\n        return 7\n\n    \n", "funcname": "remove_zeros", "entries": [[], [5202, -24344, -6528]], "exo_name": "funcs04.py_ca278_remove_zeros"},{"strategies": ["st.integers()", "st.integers()", "st.integers()", "st.integers()", "st.integers()", "st.integers()"], "solution": "def overlap(x1=0, y1=0, r1=1, x2=0, y2=0, r2=1):\n    d = ((x2-x1)**2 + (y2-y1)**2)**0.5\n    if d < r1 + r2:\n        return True\n    return False\n\ndef main():\n    print((overlap()))\n    print((overlap(10)))\n    print((overlap(10,10)))\n    print((overlap(10,10,10)))\n    print((overlap(10,0,10)))\n    print((overlap(10,0,1,8,0,1)))\n    print((overlap(10,0,1,8,0,2)))\n\nif __name__ == '__main__':\n    main()\n", "funcname": "overlap", "entries": [[12, -6058, 21436, -3483096651887624530, 24, 31017], [-30592, -26624, -11905, 1, 2, 30134], [0, 0, 0, 0, 0, 0], [5128, -8635, -28938, 25, -31295, -21637807133189218411179185993653430151], [-16348, -2218, 2871, -15155, -83, 24475], [4807, 1216206119, 8753907074291481720, -19844, -26061, -15639], [1348593950, 19232, -10923, 20, 2259187900768772679, -5343103208648864320], [8410739119977124611, 9995, 83, 8410739119977124611, 19348, 21604]], "exo_name": "circle_062.py_ca117_overlap"},{"strategies": ["st.lists(st.integers())", "st.lists(st.integers())"], "solution": "# Append l1 to l2. If l2 not supplied default to empty list.\ndef append2list(l1, l2=None):\n    if l2 == None:\n        l2 = []\n    for i in l1:\n        l2.append(i)\n    return l2\n\ndef main():    \n    list1 = ['cat', 'dog']\n    nlist = append2list(list1)\n    # nlist should be ['cat', 'dog']\n    print(nlist)\n\n    list2 = ['lion']\n    nlist = append2list(list2, ['antelope'])\n    # nlist should be ['lion', 'antelope']\n    print(nlist)\n\n    list3 = ['fox', 'chicken']\n    nlist = append2list(list3)\n    # nlist should be ['fox', 'chicken']\n    print(nlist)\n\nif __name__ == '__main__':\n    main()\n", "funcname": "append2list", "entries": [{"__tuple__": true, "items": [[-12248, -4743, -25, -6030600119498841921, -8866], [-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866]]}, {"__tuple__": true, "items": [[-12248, -4743, -25, -6030600119498841921, -8866], [-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866]]}, {"__tuple__": true, "items": [[-12248, -4743, -25, -6030600119498841921, -8866, -16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866], [-16276, 117, -12248, -4743, -25, -6030600119498841921, -8866, -12248, -4743, -25, -6030600119498841921, -8866]]}, {"__tuple__": true, "items": [[-21267], [-21267, -21267]]}], "exo_name": "mutable_062.py_ca117_append2list"},{"strategies": [""], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  while num >= 1:\n    print(num)\n    time.sleep(0.1)\n    num = num - 1\n  print('LIFT OFF!')\n\ndef search(str,letter):\n  '''returns True if letter is in str, False if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return True\n    i = i + 1\n  return False\n\ndef index(str,letter):\n  '''returns the position of letter in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return i\n    i = i + 1\n  return -1\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonacci series at position n'''\n  if n == 0:\n    return 0\n  if n == 1:\n    return 1\n  else:\n    fibN_2 = 0\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t'))\n  print(index('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "countdown", "entries": [-1, 0, 5, 42], "exo_name": "iterative07.py_ca278_countdown"},{"strategies": ["st.text(alphanum)", "st.text(alphanum,1,1)"], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  while num >= 1:\n    print(num)\n    time.sleep(0.1)\n    num = num - 1\n  print('LIFT OFF!')\n\ndef search(str,letter):\n  '''returns True if letter is in str, False if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return True\n    i = i + 1\n  return False\n\ndef index(str,letter):\n  '''returns the position of letter in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return i\n    i = i + 1\n  return -1\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonacci series at position n'''\n  if n == 0:\n    return 0\n  if n == 1:\n    return 1\n  else:\n    fibN_2 = 0\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t'))\n  print(index('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "search", "entries": [{"__tuple__": true, "items": ["", "0"]}], "exo_name": "iterative07.py_ca278_search"},{"strategies": ["st.text(alphanum)", "st.text(alphanum,1,1)"], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  while num >= 1:\n    print(num)\n    time.sleep(0.1)\n    num = num - 1\n  print('LIFT OFF!')\n\ndef search(str,letter):\n  '''returns True if letter is in str, False if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return True\n    i = i + 1\n  return False\n\ndef index(str,letter):\n  '''returns the position of letter in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return i\n    i = i + 1\n  return -1\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonacci series at position n'''\n  if n == 0:\n    return 0\n  if n == 1:\n    return 1\n  else:\n    fibN_2 = 0\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t'))\n  print(index('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "index", "entries": [{"__tuple__": true, "items": ["", "0"]}, {"__tuple__": true, "items": ["0", "0"]}, {"__tuple__": true, "items": ["11", "1"]}], "exo_name": "iterative07.py_ca278_index"},{"strategies": ["st.integers(1,100)"], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  while num >= 1:\n    print(num)\n    time.sleep(0.1)\n    num = num - 1\n  print('LIFT OFF!')\n\ndef search(str,letter):\n  '''returns True if letter is in str, False if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return True\n    i = i + 1\n  return False\n\ndef index(str,letter):\n  '''returns the position of letter in str, -1 if it is not there'''\n  i = 0\n  while i < len(str):\n    if letter == str[i]:\n      return i\n    i = i + 1\n  return -1\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonacci series at position n'''\n  if n == 0:\n    return 0\n  if n == 1:\n    return 1\n  else:\n    fibN_2 = 0\n    fibN_1 = 1\n    i = 2\n    while i <=n:\n      fibN = fibN_2 + fibN_1\n      fibN_2 = fibN_1\n      fibN_1 = fibN\n      i = i + 1\n    return fibN\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t'))\n  print(index('test','a'))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "fibonacci", "entries": [1, 41, 3, 91], "exo_name": "iterative07.py_ca278_fibonacci"},{"strategies": [""], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  if num == 0:\n    print(\"LIFT OFF!\")\n  else:\n    print(num)\n    time.sleep(0.1)\n    countdown(num-1)\n\ndef search(str,letter):\n  '''returns True if letter is in str, False otherwise'''\n  if str == \"\":\n    return False\n  elif str[0] == letter:\n    return True\n  else:\n    #keep looking\n    return search(str[1:],letter)\n  \n\ndef index(str,letter,pos):\n  '''returns the position of letter in str, -1 if it is not there'''\n  if pos == len(str):\n    return -1\n  elif str[pos] == letter:\n    return pos\n  else:\n    return index(str,letter,pos+1)\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonacci series at position n'''\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t',0))\n  print(index('test','a',0))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "countdown", "entries": [-1, 0, 5, 42], "exo_name": "recursive07.py_ca278_countdown"},{"strategies": ["st.text(alphanum)", "st.text(alphanum,1,1)"], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  if num == 0:\n    print(\"LIFT OFF!\")\n  else:\n    print(num)\n    time.sleep(0.1)\n    countdown(num-1)\n\ndef search(str,letter):\n  '''returns True if letter is in str, False otherwise'''\n  if str == \"\":\n    return False\n  elif str[0] == letter:\n    return True\n  else:\n    #keep looking\n    return search(str[1:],letter)\n  \n\ndef index(str,letter,pos):\n  '''returns the position of letter in str, -1 if it is not there'''\n  if pos == len(str):\n    return -1\n  elif str[pos] == letter:\n    return pos\n  else:\n    return index(str,letter,pos+1)\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonacci series at position n'''\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t',0))\n  print(index('test','a',0))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "search", "entries": [{"__tuple__": true, "items": ["", "0"]}, {"__tuple__": true, "items": ["-=", "5"]}, {"__tuple__": true, "items": ["0", "0"]}], "exo_name": "recursive07.py_ca278_search"},{"strategies": ["st.text(alphanum)", "st.text(alphanum,1,1)", "st.integers(0,0)"], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  if num == 0:\n    print(\"LIFT OFF!\")\n  else:\n    print(num)\n    time.sleep(0.1)\n    countdown(num-1)\n\ndef search(str,letter):\n  '''returns True if letter is in str, False otherwise'''\n  if str == \"\":\n    return False\n  elif str[0] == letter:\n    return True\n  else:\n    #keep looking\n    return search(str[1:],letter)\n  \n\ndef index(str,letter,pos):\n  '''returns the position of letter in str, -1 if it is not there'''\n  if pos == len(str):\n    return -1\n  elif str[pos] == letter:\n    return pos\n  else:\n    return index(str,letter,pos+1)\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonacci series at position n'''\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t',0))\n  print(index('test','a',0))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "index", "entries": [{"__tuple__": true, "items": ["", "0", 0]}, {"__tuple__": true, "items": ["0", "0", 0]}, {"__tuple__": true, "items": ["a", "8", 0]}, {"__tuple__": true, "items": ["tV2", "2", 0]}], "exo_name": "recursive07.py_ca278_index"},{"strategies": ["st.integers(1,100)"], "solution": "import time\n\ndef countdown(num):\n  '''prints all the numbers from num to 1 with a gap of 100 milliseconds in between each print, followed by LIFT OFF!'''\n  if num == 0:\n    print(\"LIFT OFF!\")\n  else:\n    print(num)\n    time.sleep(0.1)\n    countdown(num-1)\n\ndef search(str,letter):\n  '''returns True if letter is in str, False otherwise'''\n  if str == \"\":\n    return False\n  elif str[0] == letter:\n    return True\n  else:\n    #keep looking\n    return search(str[1:],letter)\n  \n\ndef index(str,letter,pos):\n  '''returns the position of letter in str, -1 if it is not there'''\n  if pos == len(str):\n    return -1\n  elif str[pos] == letter:\n    return pos\n  else:\n    return index(str,letter,pos+1)\n\n\ndef fibonacci(n):\n  '''returns the value of the fibonacci series at position n'''\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return fibonacci(n-1) + fibonacci(n-2)\n\nif __name__ == '__main__':\n  print('testing countdown')\n  countdown(10)\n\n  print('testing search')\n  print(search('test','t'))\n  print(search('test','a'))\n\n  print('testing index')\n  print(index('test','t',0))\n  print(index('test','a',0))\n\n  print('testing fibonacci')\n  print(fibonacci(5))\n\n   \n    \n\n\n", "funcname": "fibonacci", "entries": [0, 1, 2, 10, 23, 99], "exo_name": "recursive07.py_ca278_fibonacci"},{"strategies": ["st.integers(0)"], "solution": "\n\ndef factorial(n):\n\tif n < 2:\n\t\treturn 1\n\treturn n * factorial(n-1)", "funcname": "factorial", "entries": [-1, 0, 1, 2, 5, 20], "exo_name": "factorial_102.py_ca117_factorial"},{"strategies": ["st.integers(0)"], "solution": "#!/usr/bin/env python3\n\ndef sumup(n):\n\tif n < 2:\n\t\treturn n\n\tsum_to_n = sumup(n-1)\n\treturn n + sum_to_n", "funcname": "sumup", "entries": [0, 1, 2, 10, 27], "exo_name": "sumup_102.py_ca117_sumup"}]